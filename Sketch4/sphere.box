{
  "boxOutline" #field/serializable{
    :base64 "rO0ABXNyABFmaWVsZC5saW5hbGcuVmVjNAAAAAAAAAABDAAAeHB3IAAAAAAAAAAAAAAAAAAAAAA/0zMzMzMzMz/QAAAAAAAAeA=="
  }
  "fragment" "#version 410\nlayout(location=0) out vec4 _output;\nin vec4 ovcolor;\nuniform float opacity;\n\nin vec2 ftextureCoordinate;\nin vec3 fnormal;\n\n\nvoid main()\n{\n\t_output  = ovcolor.xyzw;\n\t_output.w *= opacity;\n\n\t// ----------------\n\t// this is a good spot to put other manipulations of color\n\t// ----------------\n\n\t// for example:\n\t//\t_output.rgb = ovcolor.rgb*pow( abs(dot(fnormal.rgb, normalize(vec3(1,1,1)))), 2);\n\t//\t_output.rgb += vec3(1,0,0)*pow( max(0,dot(fnormal.rgb, normalize(vec3(1,0,0)))), 2);\n}\n"
  "name" "sphere"
  "geometry" "#version 410\nlayout (triangles) in;\nlayout (triangle_strip) out;\nlayout (max_vertices = 3) out;\n\nout vec4 ovcolor;\nin vec4[] vcolor;\n\nin float[] CD;\n\nin int[] id;\nuniform int sides;\n\n\nin vec3[] onormal;\nin vec2[] otextureCoordinates;\n\nout vec2 ftextureCoordinate;\nout vec3 fnormal;\n\n\nvoid main(void)\n{\n\n    // this is the geometry shader, \n    // unless you want to do things to whole triangles\n    // that you can't do to individual vertices\n    // I'd look elsewhere....\n\n    if (sides==1 && id[0]!=1) return;\n    if (sides==2 && id[0]!=0) return;\n    int i;\n\n    for (i = 0; i < gl_in.length(); i++)\n    {\n        gl_Position = gl_in[i].gl_Position;\n        gl_ClipDistance[0] = CD[i];\n        ovcolor = vcolor[i];\n\n        fnormal = onormal[i];\n        ftextureCoordinate = otextureCoordinates[i];\n\n        EmitVertex();\n    }\n\n    EndPrimitive();\n}"
  "_vertex_cookie" "{\"output\":\"appendRemoteOutputToLine(136, \\\"<div class=\\\\\\\"outputline\\\\\\\"><div class=\\\\\\\"outputline\\\\\\\">vertex shader reloaded correctly<\\/div><div class=\\\\\\\"outputline\\\\\\\">vertex shader reloaded correctly<\\/div><div class=\\\\\\\"outputline\\\\\\\">vertex shader reloaded correctly<\\/div><\\/div><div class=\\\\\\\"outputline\\\\\\\">33.58021583485178<\\/div>\\\", 'Field-remoteOutput-error', 'Field-remoteOutput', false,0)\\n\",\"folds\":{\"selections\":[{\"head\":{\"ch\":17,\"line\":10,\"sticky\":null},\"anchor\":{\"ch\":17,\"line\":10,\"sticky\":null}}],\"marks\":[]},\"history\":{\"done\":[{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":0,\"line\":0,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":0,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":0,\"line\":10,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":10,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":1,\"line\":132,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":0,\"sticky\":null}}]},{\"changes\":[{\"from\":{\"ch\":0,\"line\":0,\"sticky\":null},\"to\":{\"ch\":0,\"line\":0,\"sticky\":null},\"text\":[\"#version 410\",\"\",\"layout(location=0) in vec3 position;\",\"layout(location=1) in vec4 color;\",\"layout(location=2) in vec2 pointControl;\",\"out vec2 pc_q;\",\"out vec4 vcolor;\",\"\",\"layout(location=3) in vec3 normal;\",\"layout(location=4) in vec2 textureCoordinates;\",\"\",\"out vec3 onormal;\",\"out vec2 otextureCoordinates;\",\"\",\"\",\"uniform vec2 translation;\",\"uniform vec2 scale;\",\"uniform vec2 bounds;\",\"uniform float displayZ;\",\"\",\"uniform mat4 P;\",\"uniform mat4 V;\",\"\",\"uniform vec2 rotator;\",\"uniform mat4 Pl;\",\"uniform mat4 Vl;\",\"uniform mat4 Pr;\",\"uniform mat4 Vr;\",\"\",\"uniform float isVR;\",\"\",\"out float CD;\",\"\",\"uniform float reallyVR;\",\"uniform float vrOptIn;\",\"\",\"out int id;\",\"\",\"uniform mat4 localTransform;\",\"\",\"void main()\",\"{\",\"\\t// --------------------------- ignore this ---------------------\",\"\\t// here be dragons\",\"\\t\",\"    id = gl_InstanceID;\",\"    onormal = normal;\",\"\\totextureCoordinates = textureCoordinates;\",\"\",\"    vec2 at = ((position.xy+vec2(0.5,0.5))+translation.xy)/bounds.xy;\",\"    gl_Position =  vec4(scale.x*(-1+at.x*2)+displayZ*position.z, scale.y*(-1+at.y*2), position.z/100, 1.0);\",\"    gl_Position.xy = vec2(rotator.x*gl_Position.x + rotator.y*gl_Position.y, -rotator.y*gl_Position.x + rotator.x*gl_Position.y);\",\"    if (vrOptIn>0)\",\"        gl_Position = vec4(position.xyz,1);\",\"\",\"    mat4 et = mat4(0);\",\"    if (isVR>0)\",\"    {\",\"        if (reallyVR>0)\",\"        {\",\"            if (gl_InstanceID==1)\",\"            {\",\"                et = transpose(Pl)*transpose(Vl)*V;\",\"            }\",\"            else\",\"            {\",\"                et = transpose(Pr)*transpose(Vr)*V;\",\"            }\",\"        }\",\"        else\",\"        {\",\"            if (gl_InstanceID==0)\",\"            {\",\"                et = (Pl)*(Vl);\",\"            }\",\"            else\",\"            {\",\"                et = (Pr)*(Vr);\",\"            }\",\"        }\",\"\",\"    }\",\"    else\",\"    {\",\"        et = P*V;\",\"    }\",\"\",\"\\tonormal = normalize(mat3(localTransform) * onormal);\",\"\\t\",\"    vec4 ep =  localTransform * gl_Position;\",\"\",\"\\t// --------------------------------\\t\",\"\\t// this is a good spot to put some code that changes \",\"\\t// the position of vertices\",\"\\t// 'ep' is the position of the vertex and 'et' is the projection * camera matrix\",\"\\t// --------------------------------\",\"\\t\",\"    gl_Position = et*ep;\",\"\",\"\",\"\\t\",\"    vcolor = color;\",\"\\t\",\"\\t// --------------------------------\\t\",\"\\t// this is a good spot to put some code that changes \",\"\\t// the color of vertices\",\"\\t// vcolor.rgba is the color of the vertex\",\"\\t// sometimes, depending on the model, 'normal' is useful as well\",\"\\t// --------------------------------\",\"\\t\",\"\\t// e.g, a simple two-sided lighting equation\",\"\\t//vcolor.rgba *= abs(dot(normal, normalize(vec3(1,1,1))));\",\"\\t\",\"\\t\",\"\\t\",\"\\t// ------------------ dragons again --------------------------\",\"\\tpc_q = pointControl;\",\"    \",\"\\tif (isVR>0)\",\"    {\",\"        if (gl_InstanceID==0)\",\"        {\",\"            gl_Position.x = gl_Position.x/2 + 0.5*gl_Position.w;\",\"            CD = gl_Position.x;\",\"        }\",\"        else\",\"        {\",\"            gl_Position.x = gl_Position.x/2 - 0.5*gl_Position.w;\",\"            CD = -gl_Position.x;\",\"        }\",\"    }\",\"\\t\",\"}\"]}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":0,\"line\":0,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":0,\"sticky\":null}}]},{\"changes\":[{\"from\":{\"ch\":0,\"line\":0,\"sticky\":null},\"to\":{\"ch\":0,\"line\":136,\"sticky\":null},\"text\":[\"\"]}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":0,\"line\":136,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":136,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":0,\"line\":9,\"sticky\":null},\"anchor\":{\"ch\":34,\"line\":9,\"sticky\":null}}]},{\"changes\":[{\"from\":{\"ch\":0,\"line\":9,\"sticky\":null},\"to\":{\"ch\":0,\"line\":9,\"sticky\":null},\"text\":[\"layout(location=4) in vec3 normal;\"]},{\"from\":{\"ch\":34,\"line\":8,\"sticky\":null},\"to\":{\"ch\":34,\"line\":8,\"sticky\":null},\"text\":[\"\",\"\"]}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":34,\"line\":8,\"sticky\":null},\"anchor\":{\"ch\":34,\"line\":8,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":40,\"line\":4,\"sticky\":null},\"anchor\":{\"ch\":40,\"line\":4,\"sticky\":null}}]},{\"changes\":[{\"from\":{\"ch\":40,\"line\":4,\"sticky\":null},\"to\":{\"ch\":0,\"line\":5,\"sticky\":null},\"text\":[\"\"]}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":0,\"line\":5,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":5,\"sticky\":null}}]},{\"changes\":[{\"from\":{\"ch\":0,\"line\":5,\"sticky\":null},\"to\":{\"ch\":34,\"line\":5,\"sticky\":null},\"text\":[\"\"]}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":34,\"line\":5,\"sticky\":null},\"anchor\":{\"ch\":34,\"line\":5,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":14,\"line\":6,\"sticky\":null},\"anchor\":{\"ch\":34,\"line\":5,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":0,\"line\":8,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":8,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":1,\"line\":9,\"sticky\":null},\"anchor\":{\"ch\":34,\"line\":9,\"sticky\":null}}]},{\"changes\":[{\"from\":{\"ch\":1,\"line\":9,\"sticky\":null},\"to\":{\"ch\":1,\"line\":9,\"sticky\":null},\"text\":[\"ayout(location=3) in vec3 normal;\"]},{\"from\":{\"ch\":0,\"line\":9,\"sticky\":null},\"to\":{\"ch\":0,\"line\":9,\"sticky\":null},\"text\":[\"l\"]},{\"from\":{\"ch\":0,\"line\":8,\"sticky\":null},\"to\":{\"ch\":0,\"line\":8,\"sticky\":null},\"text\":[\"\",\"\"]}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":0,\"line\":8,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":8,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":1,\"line\":6,\"sticky\":null},\"anchor\":{\"ch\":1,\"line\":6,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":14,\"line\":6,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":6,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":6,\"line\":7,\"sticky\":null},\"anchor\":{\"ch\":6,\"line\":7,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":14,\"line\":6,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":6,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":14,\"line\":6,\"sticky\":null},\"anchor\":{\"ch\":14,\"line\":6,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":18,\"line\":4,\"sticky\":null},\"anchor\":{\"ch\":18,\"line\":5,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":26,\"line\":5,\"sticky\":null},\"anchor\":{\"ch\":26,\"line\":5,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":34,\"line\":5,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":5,\"sticky\":null}}]},{\"changes\":[{\"from\":{\"ch\":0,\"line\":5,\"sticky\":null},\"to\":{\"ch\":0,\"line\":5,\"sticky\":null},\"text\":[\"layout(location=4) in vec3 normal;\"]}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":0,\"line\":5,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":5,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":0,\"line\":8,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":8,\"sticky\":null}}]},{\"changes\":[{\"from\":{\"ch\":0,\"line\":8,\"sticky\":null},\"to\":{\"ch\":0,\"line\":9,\"sticky\":null},\"text\":[\"\"]}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":0,\"line\":9,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":9,\"sticky\":null}}]},{\"changes\":[{\"from\":{\"ch\":0,\"line\":9,\"sticky\":null},\"to\":{\"ch\":34,\"line\":9,\"sticky\":null},\"text\":[\"\"]}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":34,\"line\":9,\"sticky\":null},\"anchor\":{\"ch\":34,\"line\":9,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":38,\"line\":10,\"sticky\":null},\"anchor\":{\"ch\":38,\"line\":10,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":0,\"line\":11,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":11,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":0,\"line\":11,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":11,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":0,\"line\":12,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":11,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":0,\"line\":11,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":11,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":16,\"line\":10,\"sticky\":null},\"anchor\":{\"ch\":16,\"line\":10,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":0,\"line\":11,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":11,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":17,\"line\":10,\"sticky\":null},\"anchor\":{\"ch\":17,\"line\":10,\"sticky\":null}}]},{\"changes\":[{\"from\":{\"ch\":16,\"line\":10,\"sticky\":null},\"to\":{\"ch\":16,\"line\":10,\"sticky\":null},\"text\":[\"4\"]}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":16,\"line\":10,\"sticky\":null},\"anchor\":{\"ch\":16,\"line\":10,\"sticky\":null}}]},{\"changes\":[{\"from\":{\"ch\":16,\"line\":10,\"sticky\":null},\"to\":{\"ch\":17,\"line\":10,\"sticky\":null},\"text\":[\"\"]}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":17,\"line\":10,\"sticky\":null},\"anchor\":{\"ch\":17,\"line\":10,\"sticky\":null}}]}],\"undone\":[]},\"currentpos\":{\"ch\":17,\"line\":10,\"sticky\":null},\"widgets\":[],\"brackets\":\"\"}"
  "frame" #field/rect{
    :x 203.453125
    :y 354.6328125
    :w 100.0
    :h 100.0
  }
  "__filename__code" "{{workspace}}/sphere.box.js"
  "_code_cookie" "{\"output\":\"appendRemoteOutputToLine(13, \\\"<div class=\\\\\\\"outputline\\\\\\\"><div class=\\\\\\\"outputline\\\\\\\"><div class=\\\\\\\"outputline\\\\\\\"><div class=\\\\\\\"outputline\\\\\\\"><div class=\\\\\\\"outputline\\\\\\\"><div class=\\\\\\\"outputline\\\\\\\"><div class=\\\\\\\"outputline\\\\\\\"><div class=\\\\\\\"outputline\\\\\\\">✓<\\/div><div class=\\\\\\\"outputline\\\\\\\">vertex shader reloaded correctly<\\/div><div class=\\\\\\\"outputline\\\\\\\">geometry shader reloaded correctly<\\/div><div class=\\\\\\\"outputline\\\\\\\">fragment shader reloaded correctly<\\/div><\\/div><\\/div><\\/div><\\/div><\\/div><\\/div><\\/div>\\\", 'Field-remoteOutput-error', 'Field-remoteOutput', false,0)\\n\",\"folds\":{\"selections\":[{\"head\":{\"ch\":0,\"line\":13,\"xRel\":1,\"outside\":true,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":13,\"xRel\":1,\"outside\":true,\"sticky\":null}}],\"marks\":[]},\"history\":{\"done\":[{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":0,\"line\":0,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":0,\"sticky\":null}}]},{\"changes\":[{\"from\":{\"ch\":0,\"line\":0,\"sticky\":null},\"to\":{\"ch\":0,\"line\":13,\"sticky\":null},\"text\":[\"\"]}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":0,\"line\":13,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":13,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":40,\"line\":11,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":11,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":40,\"line\":11,\"sticky\":null},\"anchor\":{\"ch\":40,\"line\":11,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":40,\"line\":11,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":11,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":40,\"line\":11,\"sticky\":null},\"anchor\":{\"ch\":40,\"line\":11,\"sticky\":null}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":40,\"line\":11,\"xRel\":-1,\"sticky\":\"before\"},\"anchor\":{\"ch\":40,\"line\":11,\"xRel\":-1,\"sticky\":\"before\"}}]},{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":0,\"line\":13,\"xRel\":1,\"outside\":true,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":13,\"xRel\":1,\"outside\":true,\"sticky\":null}}]}],\"undone\":[]},\"currentpos\":{\"ch\":0,\"line\":13,\"xRel\":1,\"outside\":true,\"sticky\":null},\"widgets\":[],\"brackets\":\"\"}"
  "code" "var layer = _.stage.withName(\"some sphere\")\nlayer.vrDefaults()\nlayer.makeKeyboardCamera()\n\nvar myTriangles = layer.rawTriangles.myTriangles\n\nmyTriangles.open()\nmyTriangles.aux(1,0.3,0.6,0.8,1)\nShapes.sphere(1,15,10, myTriangles)\nmyTriangles.close()\n\nvar shader = layer.bindTriangleShader(_)\n\n"
  "vertex" "#version 410\n\nlayout(location=0) in vec3 position;\nlayout(location=1) in vec4 color;\nlayout(location=2) in vec2 pointControl;\n\nout vec2 pc_q;\nout vec4 vcolor;\n\nlayout(location=4) in vec3 normal;\nlayout(location=3) in vec2 textureCoordinates;\n\nout vec3 onormal;\nout vec2 otextureCoordinates;\n\n\nuniform vec2 translation;\nuniform vec2 scale;\nuniform vec2 bounds;\nuniform float displayZ;\n\nuniform mat4 P;\nuniform mat4 V;\n\nuniform vec2 rotator;\nuniform mat4 Pl;\nuniform mat4 Vl;\nuniform mat4 Pr;\nuniform mat4 Vr;\n\nuniform float isVR;\n\nout float CD;\n\nuniform float reallyVR;\nuniform float vrOptIn;\n\nout int id;\n\nuniform mat4 localTransform;\n\nvoid main()\n{\n\t// --------------------------- ignore this ---------------------\n\t// here be dragons\n\t\n    id = gl_InstanceID;\n    onormal = normal;\n\totextureCoordinates = textureCoordinates;\n\n    vec2 at = ((position.xy+vec2(0.5,0.5))+translation.xy)/bounds.xy;\n    gl_Position =  vec4(scale.x*(-1+at.x*2)+displayZ*position.z, scale.y*(-1+at.y*2), position.z/100, 1.0);\n    gl_Position.xy = vec2(rotator.x*gl_Position.x + rotator.y*gl_Position.y, -rotator.y*gl_Position.x + rotator.x*gl_Position.y);\n    if (vrOptIn>0)\n        gl_Position = vec4(position.xyz,1);\n\n    mat4 et = mat4(0);\n    if (isVR>0)\n    {\n        if (reallyVR>0)\n        {\n            if (gl_InstanceID==1)\n            {\n                et = transpose(Pl)*transpose(Vl)*V;\n            }\n            else\n            {\n                et = transpose(Pr)*transpose(Vr)*V;\n            }\n        }\n        else\n        {\n            if (gl_InstanceID==0)\n            {\n                et = (Pl)*(Vl);\n            }\n            else\n            {\n                et = (Pr)*(Vr);\n            }\n        }\n\n    }\n    else\n    {\n        et = P*V;\n    }\n\n\tonormal = normalize(mat3(localTransform) * onormal);\n\t\n    vec4 ep =  localTransform * gl_Position;\n\n\t// --------------------------------\t\n\t// this is a good spot to put some code that changes \n\t// the position of vertices\n\t// 'ep' is the position of the vertex and 'et' is the projection * camera matrix\n\t// --------------------------------\n\t\n    gl_Position = et*ep;\n\n\n\t\n    vcolor = color;\n\t\n\t// --------------------------------\t\n\t// this is a good spot to put some code that changes \n\t// the color of vertices\n\t// vcolor.rgba is the color of the vertex\n\t// sometimes, depending on the model, 'normal' is useful as well\n\t// --------------------------------\n\t\n\t// e.g, a simple two-sided lighting equation\n\t//vcolor.rgba *= abs(dot(normal, normalize(vec3(1,1,1))));\n\t\n\tfloat d = abs(dot(normal, normalize(vec3(1,1,1))));\n\tvcolor = color;\n\tvcolor.xyz *= d;\n\t\n\t// ------------------ dragons again --------------------------\n\tpc_q = pointControl;\n    \n\tif (isVR>0)\n    {\n        if (gl_InstanceID==0)\n        {\n            gl_Position.x = gl_Position.x/2 + 0.5*gl_Position.w;\n            CD = gl_Position.x;\n        }\n        else\n        {\n            gl_Position.x = gl_Position.x/2 - 0.5*gl_Position.w;\n            CD = -gl_Position.x;\n        }\n    }\n\t\n}\n"
  "withOverloading" true
  "__filename__vertex" "{{workspace}}/sphere.box.glslv"
  "__id__" "_3f77edcf_32a2_4464_9962_29c6a7b89742"
  "__datafilename__" "{{workspace}}/sphere.box"
  "boxBackground" #field/serializable{
    :base64 "rO0ABXNyABFmaWVsZC5saW5hbGcuVmVjNAAAAAAAAAABDAAAeHB3ID/wAAAAAAAAP+5mZmZmZmY/7MzMzMzMzT/oAAAAAAAAeA=="
  }
  "__filename__geometry" "{{workspace}}/sphere.box.glslg"
  "__filename__fragment" "{{workspace}}/sphere.box.glslf"
  "__boxclass__" "fieldbox.boxes.Box"
}